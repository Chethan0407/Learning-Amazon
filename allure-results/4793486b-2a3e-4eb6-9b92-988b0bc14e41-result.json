{"name": "test_search_and_add_to_cart", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div id=\"nav-cart-count-container\">...</div> is not clickable at point (1243, 19). Other element would receive the click: <div aria-live=\"polite\" class=\"a-changeover puis-atcb-notification\" style=\"\">...</div>\n  (Session info: chrome=125.0.6422.77)\nStacktrace:\n0   chromedriver                        0x0000000103142510 chromedriver + 4302096\n1   chromedriver                        0x000000010313ae58 chromedriver + 4271704\n2   chromedriver                        0x0000000102d6c19c chromedriver + 278940\n3   chromedriver                        0x0000000102db3d48 chromedriver + 572744\n4   chromedriver                        0x0000000102db22ec chromedriver + 565996\n5   chromedriver                        0x0000000102db047c chromedriver + 558204\n6   chromedriver                        0x0000000102daf9cc chromedriver + 555468\n7   chromedriver                        0x0000000102da4e24 chromedriver + 511524\n8   chromedriver                        0x0000000102da485c chromedriver + 510044\n9   chromedriver                        0x0000000102de6c5c chromedriver + 781404\n10  chromedriver                        0x0000000102da3004 chromedriver + 503812\n11  chromedriver                        0x0000000102da39ec chromedriver + 506348\n12  chromedriver                        0x000000010310a558 chromedriver + 4072792\n13  chromedriver                        0x000000010310f004 chromedriver + 4091908\n14  chromedriver                        0x00000001030f179c chromedriver + 3970972\n15  chromedriver                        0x000000010310f8ec chromedriver + 4094188\n16  chromedriver                        0x00000001030e471c chromedriver + 3917596\n17  chromedriver                        0x000000010312cb50 chromedriver + 4213584\n18  chromedriver                        0x000000010312cccc chromedriver + 4213964\n19  chromedriver                        0x000000010313aa50 chromedriver + 4270672\n20  libsystem_pthread.dylib             0x00000001c3d5826c _pthread_start + 148\n21  libsystem_pthread.dylib             0x00000001c3d5308c thread_start + 8", "trace": "self = <tests.test_amazon.TestAmazon object at 0x10435fed0>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0e86876ba35803bae9e4d9567e5a82c7\")>\n\n    def test_search_and_add_to_cart(self, driver):\n        homepage = HomePage(driver)\n        search_result_page = SearchResultPage(driver)\n        product_page = Product(driver)\n        cart_page = CartPage(driver)\n    \n    \n        homepage.search_products(\"iphone\")\n        product_title = search_result_page.assert_atlest_three_products()\n    \n        #printing the first three products\n        for title in product_title:\n            print(title)\n    \n    \n        #click the first produuct and to add\n    \n        print(\"have give 3 list of apple iphones\")\n        product_page.add_to_cart()\n        time.sleep(5)\n>       cart_page.click_cart_icon()\n\ntest_amazon.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../Pages/cartPage.py:12: in click_cart_icon\n    self.click(self.CART_ICON)\n../Pages/basePage.py:20: in click\n    element.click()\n../.venv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../.venv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../.venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1043afe50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...0001c3d5826c _pthread_start + 148\\\\n21  libsystem_pthread.dylib             0x00000001c3d5308c thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div id=\"nav-cart-count-container\">...</div> is not clickable at point (1243, 19). Other element would receive the click: <div aria-live=\"polite\" class=\"a-changeover puis-atcb-notification\" style=\"\">...</div>\nE         (Session info: chrome=125.0.6422.77)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000103142510 chromedriver + 4302096\nE       1   chromedriver                        0x000000010313ae58 chromedriver + 4271704\nE       2   chromedriver                        0x0000000102d6c19c chromedriver + 278940\nE       3   chromedriver                        0x0000000102db3d48 chromedriver + 572744\nE       4   chromedriver                        0x0000000102db22ec chromedriver + 565996\nE       5   chromedriver                        0x0000000102db047c chromedriver + 558204\nE       6   chromedriver                        0x0000000102daf9cc chromedriver + 555468\nE       7   chromedriver                        0x0000000102da4e24 chromedriver + 511524\nE       8   chromedriver                        0x0000000102da485c chromedriver + 510044\nE       9   chromedriver                        0x0000000102de6c5c chromedriver + 781404\nE       10  chromedriver                        0x0000000102da3004 chromedriver + 503812\nE       11  chromedriver                        0x0000000102da39ec chromedriver + 506348\nE       12  chromedriver                        0x000000010310a558 chromedriver + 4072792\nE       13  chromedriver                        0x000000010310f004 chromedriver + 4091908\nE       14  chromedriver                        0x00000001030f179c chromedriver + 3970972\nE       15  chromedriver                        0x000000010310f8ec chromedriver + 4094188\nE       16  chromedriver                        0x00000001030e471c chromedriver + 3917596\nE       17  chromedriver                        0x000000010312cb50 chromedriver + 4213584\nE       18  chromedriver                        0x000000010312cccc chromedriver + 4213964\nE       19  chromedriver                        0x000000010313aa50 chromedriver + 4270672\nE       20  libsystem_pthread.dylib             0x00000001c3d5826c _pthread_start + 148\nE       21  libsystem_pthread.dylib             0x00000001c3d5308c thread_start + 8\n\n../.venv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "stdout", "source": "0e3d6331-9235-482d-9a82-2f231f56517a-attachment.txt", "type": "text/plain"}], "start": 1716712810839, "stop": 1716712835511, "uuid": "7e2e97a5-7c33-42cf-b7a8-0532ab5e8f22", "historyId": "cad279dc4eaa2ef55f6032a684ed9095", "testCaseId": "cad279dc4eaa2ef55f6032a684ed9095", "fullName": "tests.test_amazon.TestAmazon#test_search_and_add_to_cart", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('driver')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_amazon"}, {"name": "subSuite", "value": "TestAmazon"}, {"name": "host", "value": "Chethans-MacBook-Pro.local"}, {"name": "thread", "value": "5514-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_amazon"}]}